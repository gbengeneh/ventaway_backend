// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql" // or mysql / sqlite
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  username     String?
  password     String? // optional for OAuth
  provider     String? // 'google', 'github', etc.
  providerId   String? // ID from the OAuth provider
  refreshToken String? // hashed refresh token
  avatar       String? // Profile picture
  bio          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts                Post[]
  comments             Comment[]
  likes                Like[]
  messages             Message[]
  groupMemberships     GroupMember[]
  communityMemberships CommunityMember[]
  participants         ConversationParticipant[]
}

model Post {
  id        String     @id @default(cuid())
  userId    String
  content   String?
  mediaType MediaType? // IMAGE, VIDEO, AUDIO
  mediaUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
  likes    Like[]
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  imageUrl    String?  // Add image_url field

  members GroupMember[]
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String
  joinedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Community {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  imageUrl    String?  // Add image_url field

  members CommunityMember[]
}


model CommunityMember {
  id          String   @id @default(cuid())
  communityId String
  userId      String
  role        String
  joinedAt    DateTime @default(now())

  community Community @relation(fields: [communityId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Conversation {
  id        String           @id @default(cuid())
  type      ConversationType
  createdAt DateTime         @default(now())

  messages     Message[]
  participants ConversationParticipant[] // 
}

enum ConversationType {
  PRIVATE
  GROUP
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  userId         String
  content        String?
  mediaUrl       String?
  mediaType      MediaType?
  status         MessageStatus @default(SENT)
  createdAt      DateTime      @default(now())

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
